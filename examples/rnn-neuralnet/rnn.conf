name: "rnn-simple elman model"

neuralnet {

win_size: 3

layer {
  name: "kSharddata"
  type: "kShardData"
  unroll_decision: false
}

layer{
  name:"kRnndata"
  type: "kMnistImage"
  srclayers: "kSharddata"
  unroll_decision: false
}


layer{
  name: "kLabel"
  type: "kLabel"
  srclayers: "kSharddata"
  unroll_decision: false
}

layer{
  name: "kInnerproduct1"
  type: "kInnerProduct"
  srclayers:"kRnndata"
  unroll_decision: true
}

layer{
  name: "kInnerproduct2"
  type:"kInnerProduct"
  srclayers:"kInnerproduct1"
  srclayers:"kInnerproduct3"
  unroll_decision: true
}

layer{
  name: "kInnerproduct3"
  type: "kInnerProduct"
  srclayers: "kInnerproduct2"
  unroll_decision: true
}

layer{
  name: "kAggregate"
  type: "kInnerProduct"
  srclayers:"kInnerproduct3"
  unroll_decision: false
  related_info: 0
  related_info: 1
  related_info: 2
}

layer{
  name: "kSoftmaxloss"
  type:"kSoftmaxLoss"
  srclayers:"kAggregate"
  srclayers:"kLabel"
  unroll_decision: false
}

}

