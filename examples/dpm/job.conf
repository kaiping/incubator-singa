name: "dpm"
train_steps: 1000
test_steps:10
test_freq:60
disp_freq:10
train_one_batch {
  alg: kBPTT
}
updater{
  type: kSGD
  learning_rate{
    type : kStep
    base_lr: 0.001
    step_conf{
      change_freq: 60
      gamma: 0.997
    }
  }
}

neuralnet {
  unroll_len: 10
  layer {
    name: "dynamic_data"
    user_type: "kDynamicData"
    unroll_len: 1
    [dynamic_data_conf] {
      backend: "kvfile"
      batchsize: 10
      path: "examples/dpm/train_data_dynamic.bin"
    }
    include: kTrain
  }

  layer {
    name: "dynamic_data"
    user_type: "kDynamicData"
    unroll_len: 1
    [dynamic_data_conf] {
      backend: "kvfile"
      batchsize: 10
      path: "examples/dpm/test_data_dynamic.bin"
    }
    include: kTest
  }

  layer {
    name: "time_span_data"
    user_type: "kTimeSpanData"
    unroll_len: 1
    [time_span_data_conf] {
      backend: "kvfile"
      batchsize: 10
      path: "examples/dpm/train_data_time_span.bin"
    }
    include: kTrain
  }

  layer {
    name: "time_span_data"
    user_type: "kTimeSpanData"
    unroll_len: 1
    [time_span_data_conf] {
      backend: "kvfile"
      batchsize: 10
      path: "examples/dpm/test_data_time_span.bin"
    }
    include: kTest
  }

  layer {
    name: "gru"
    type: kGRU
    srclayers: "dynamic_data"
    unroll_conn_type: kUnrollOneToAll // kaiping: similar to OneHotLayer in CharRnn example
    gru_conf {
      dim_hidden: 512
    }
    param {
      name: "z_hx"
      init {
        type: kUniform
        low: -0.08
        high: 0.08
      }
    }
    param {
      name: "r_hx"
      init {
        type: kUniform
        low: -0.08
        high: 0.08
      }
    }
    param {
      name: "c_hx"
      init {
        type: kUniform
        low: -0.08
        high: 0.08
      }
    }
    param {
      name: "z_hh"
      init {
        type: kUniform
        low: -0.08
        high: 0.08
      }
    }
    param {
      name: "r_hh"
      init {
        type: kUniform
        low: -0.08
        high: 0.08
      }
    }
    param {
      name: "c_hh"
      init {
        type: kUniform
        low: -0.08
        high: 0.08
      }
    }
    param {
      name: "z_b"
      init {
        type: kUniform
        low: -0.08
        high: 0.08
      }
    }
    param {
      name: "r_b"
      init {
        type: kUniform
        low: -0.08
        high: 0.08
      }
    }
    param {
      name: "c_b"
      init {
        type: kUniform
        low: -0.08
        high: 0.08
      }
    }

  }

  layer {
    name: "label"
    type: kDPMLabel // TODO(kaiping): 1st to implement; may need to create our own LabelLayer
    unroll_len: 1
    srclayers: "time_span_data"
    [label_conf]
  }

  layer {
    name: "combination"
    type: kCombine // TODO(kaiping): 3rd to implement;
    unroll_len: 1
    srclayers: "gru"
    srclayers: "time_span_data"
    unroll_conn_type: kUnrollFirstToLast // kaiping: similar to OneHotLayer in CharRnn example
    [combination_conf] {
      num_output:20
    }
    param{
      name: "whc"
      init {
        type: kUniform
        low:-0.05
        high:0.05
      }
    }
    param{
      name: "alpha"
      init {
        type : kUniform
        low: -0.05
        high:0.05
      }
    }
    param{
      name: "bhc"
      init {
        type : kUniform
        low: -0.05
        high:0.05
      }
    }
  }

  layer{
    name: "tanh"
    type: kSTanh
    unroll_len: 1
    srclayers:"combination"
  }

  layer{
    name: "fc"
    type: kInnerProduct
    unroll_len: 1
    srclayers:"tanh"
    innerproduct_conf{
      num_output: 1 // TODO(kaiping): delete later, set = 1 for regression
    }
    param{
      name: "beta"
      init {
        type: kUniform
        low:-0.05
        high:0.05
      }
    }
    param{
      name: "b"
      init {
        type: kUniform
        low: -0.05
        high:0.05
      }
    }
  }

  layer{
    name: "loss"
    type:kEuclideanLoss
    unroll_len: 1
    srclayers:"fc"
    srclayers:"label"
  }
}
cluster {
  nworker_groups: 1
  nserver_groups: 1
  nservers_per_group: 1
  nworkers_per_group: 1
  nservers_per_procs: 1
  nworkers_per_procs: 1
  workspace: "examples/dpm/"
}
