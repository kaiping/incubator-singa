cluster {
  nworker_groups: 1
  nserver_groups: 1
  nservers_per_group: 1
  nworkers_per_group: 1
  nservers_per_procs: 1
  nworkers_per_procs: 1
  workspace: "examples/rnnlm/" 
}

model {
name: "recurrent-neural-network-language-model"
#train_steps: 1000
#test_steps:10
#test_frequency:60
#display_frequency:30
train_steps:20
#test_steps:800
#test_frequency:80
display_frequency:1
alg: kBackPropagation
updater{
  base_lr: 0.001
  lr_change: kStep
  type: kSGD
  step_conf{
    change_freq: 60
    gamma: 0.997
  }
}
#debug: true

neuralnet {
layer {
  name: "data"
  type: kRnnlmData
  rnnlmdata_conf {
    class_path: "examples/rnnlm/rnnlm_class_shard"
    word_path: "examples/rnnlm/rnnlm_word_shard_train"
    window_size: 10
  }
  exclude: kTest
}

layer {
  name: "data"
  type: kRnnlmData
  rnnlmdata_conf {
    class_path: "examples/rnnlm/rnnlm_class_shard"
    word_path: "examples/rnnlm/rnnlm_word_shard_valid"
    window_size: 10
  }
  exclude: kTrain
}

layer{
  name:"classparser"
  type: kRnnlmClassparser
  srclayers: "data"
}

layer{
  name:"wordparser"
  type: kRnnlmWordparser
  srclayers: "data"
}

layer{
  name: "wordinput"
  type: kRnnlmWordinput
  rnnlmwordinput_conf {
    word_length: 10
    bias_term: false
  }
  srclayers: "wordparser"
    param{
    name: "w1"
    init_method: kUniform
    low:-0.3
    high:0.3
  }
}

layer{
  name: "innerproduct"
  type: kRnnlmInnerproduct
  srclayers:"wordinput"
  rnnlminnerproduct_conf{
    num_output: 15
	bias_term: false
  }
  param{
    name: "w2"
    init_method: kUniform
    low:-0.3
    high:0.3
  }
}

layer{
  name: "sigmoid"
  type: kRnnlmSigmoid
  srclayers:"innerproduct"
  rnnlmsigmoid_conf {
    bias_term: false
  }
  param{
    name: "w3"
    init_method: kUniform
    low:-0.3
    high:0.3
  }
}
layer{
  name: "computation"
  type: kRnnlmComputation
  srclayers:"sigmoid"
  srclayers:"classparser"
  rnnlmcomputation_conf{
    bias_term: false
  }
  param{
    name: "w4"
    init_method: kUniform
    low:-0.3
    high:0.3
  }
}
}
}
