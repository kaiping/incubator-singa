package singa;

enum MsgType {
  kGet = 0;
  kPut = 1;
  kSync = 2;
  kUpdate = 3;
  kSyncRequest = 4;
  kSyncResponse = 5;
  kStop = 6;
  kData = 7;
  kRGet = 8;
  kRUpdate = 9;
  kConnect = 10;
  kMetric = 11;
  kSyncReminder = 12;
};

enum EntityType {
  kWorkerParam = 0;
  kWorkerLayer = 1;
  kServer = 2;
  kStub = 3;
  kRuntime = 4;
};

enum ShareOption {
  kValueOnly = 0;
  kWhole = 1;
};

enum ConnectionType {
  kOneToOne = 0;
  kOneToAll = 1;
  kOneToMany = 2;
}

// to import caffe's lmdb dataset
message CaffeDatum {
  optional int32 channels = 1;
  optional int32 height = 2;
  optional int32 width = 3;
  // the actual image data, in bytes
  optional bytes data = 4;
  optional int32 label = 5;
  // Optionally, the datum could also hold float data.
  repeated float float_data = 6;
  // If true data contains an encoded image that need to be decoded
  optional bool encoded = 7 [default = false];
}

// to import caffe's blob, e.g., image mean
message CaffeBlob {
  optional int32 num = 1 [default = 0];
  optional int32 channels = 2 [default = 0];
  optional int32 height = 3 [default = 0];
  optional int32 width = 4 [default = 0];
  repeated float data = 5 [packed = true];
  repeated float diff = 6 [packed = true];
}

message BlobProto {
  repeated int32 shape = 1;
  repeated float data = 2 [packed = true];
}

message BlobProtos {
  repeated int32 id = 2;
  repeated int32 version = 3;
  repeated string name = 4;
  repeated BlobProto blob = 5;
}

message Record {
  enum Type {
    // each record contains image raw feature and its label.
    kSingleLabelImage = 0;
	// For implementation of Recurrent Neural Network
	// each class contains corresponding words in this class
	kWordClass = 1;
	// each record contains string name, integer index and corresponding class index
	kSingleWord = 2;
  }
  optional Type type = 1 [default = kSingleLabelImage];
  // configuration for
  optional SingleLabelImageRecord image = 2;
  //optional WordClassRecord class_record = 3;
  //optional SingleWordRecord word_record = 4;

  extensions 101 to 200;
}

message SingleLabelImageRecord {
  repeated int32 shape = 1;
  optional int32 label = 2;
  optional bytes pixel = 3;
  repeated float data = 4 [packed = true];
}

/* 
// For implementation of Recurrent Neural Network
message WordClassRecord{
  optional int32 class_index = 1; // the index of this class
  optional int32 start = 2; // the index of the start word in this class;
  optional int32 end = 3; // the index of the end word in this class
}

message SingleWordRecord {
  optional string word = 1;
  optional int32 word_index = 2;   // the index of this word in the vocabulary
  optional int32 class_index = 3;   // the index of the class corresponding to this word
}
*/

message MetricProto {
  repeated string name =1;
  repeated int32 count = 2;
  repeated float val = 3;
}
